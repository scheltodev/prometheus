apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0 # ARM-kompatible Version
          ports:
            - containerPort: 9090
          resources:
            requests:
              memory: "500Mi" # Initialer Bedarf an RAM
              cpu: "250m" # CPU-Request f端r Prometheus
            limits:
              memory: "1Gi" # Maximale RAM-Nutzung
              cpu: "500m" # Maximale CPU-Nutzung
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-data
              mountPath: /prometheus
            - name: prometheus-tls
              mountPath: /etc/prometheus/tls
              readOnly: true
            - name: prometheus-ca
              mountPath: /etc/prometheus/ca
              readOnly: true
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: prometheus-pvc # PVC f端r dauerhafte Datenspeicherung
        - name: prometheus-tls
          secret:
            secretName: prometheus-tls
        - name: prometheus-ca
          secret:
            secretName: prometheus-ca
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: prometheus
spec:
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    app: prometheus
  type: NodePort
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
      - job_name: 'kubernetes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        metrics_path: /metrics
        tls_config:
          ca_file: /etc/prometheus/ca/ca.crt
          cert_file: /etc/prometheus/tls/tls.crt
          key_file: /etc/prometheus/tls/tls.key
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token # Token hinzuf端gen
        relabel_configs:
          - source_labels: [__meta_kubernetes_node_name]
            target_label: instance
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-cluster-role
  namespace: prometheus
rules:
  - apiGroups: [""]
    resources: ["nodes", "nodes/proxy", "services", "pods", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-role-binding
  namespace: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: prometheus
roleRef:
  kind: ClusterRole
  name: prometheus-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: prometheus
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi # Speicheranforderung f端r Prometheus-Daten
